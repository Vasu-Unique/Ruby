> str = "Hello World!"
> str[str.size-1]
"!"
> str[-1] # first character from the end of the string
"!"
> str[-2] # second last character
"d"
> str[0] # first character
"H"

> str[0,4] # first four characters
"Hell"
> str[6,3] # 3 characters starting from index 6 ( 0-indexing )
"Wor"
> str[-1, 1] # 1 character starting from the END of string
"!"

> str = "Hello"
> str[str.size, 0] = " World!" # append by assigning at the end of the string
> str
"Hello World!"
> str[5, 0] = "," # insert a comma after the 5th position
> str[5, 6] = ""  # delete 6 characters starting from index 5. 
"Hello!"
> str[5,1] = " World" # replace the string starting from index 5 and of length 1 with the given string. 

> serial_average('002-10.00-20.00')
"002-15.00"

> tmp = 123
> "Hello #{tmp}"
Hello 123

#unless
 is the logical equivalent of if not 
user.update_score unless user.is_admin? 

#array
def scoring(array)
  # update_score of every user in the array unless the user is admin
     for user in array
        user.update_score unless user.is_admin?
     end
end

#loop
loop do 
    coder.practice #inbuild method
    if coder.oh_one?  #or break if <condition>
    break
end  
end

#Ruby Control Structures -while not or Until
 coder.practice until coder.oh_one?

#switch
def identify_class(obj)
    case obj 
    when Hacker
        puts "It's a Hacker!" 
    when Submission
        puts "It's a Submission!"
    when TestCase
        puts "It's a TestCase!"  
    when Contest
        puts "It's a Contest!"  
    else
        puts "It's an unknown model"
    end       
end

#Array
# Initialize 3 variables here as explained in the problem statement
array = []
array_1=[nil]
array_2=[10,10]
array_3=[1,2,3]

#each
def scoring(array)
    # iterate through each of the element in array using *each* and call update_score on it
    array.each do |user|
        user.update_score     
end
end

#Array - Addition
def end_arr_add(arr, element)
    # Add `element` to the end of the Array variable `arr` and return `arr`
    
    return  arr.push(element)
end

def begin_arr_add(arr, element)
    # Add `element` to the beginning of the Array variable `arr` and return `arr`
    
    return arr.unshift(element)
end

def index_arr_add(arr, index, element)
    # Add `element` at position `index` to the Array variable `arr` and return `arr`
    
    return arr.insert(index,element)
end

def index_arr_multiple_add(arr, index)
    # add any two elements to the arr at the index
    
    return arr.insert(index,2,3)
end

#Ruby Array - Deletion
def end_arr_delete(arr)
    # delete the element from the end of the array and return the deleted element
    return arr.pop  
end

def start_arr_delete(arr)
    # delete the element at the beginning of the array and return the deleted element
    return arr.shift
end

def delete_at_arr(arr, index)
    # delete the element at the position #index
    arr.delete_at(index)
end

def delete_all(arr, val)
    # delete all the elements of the array where element = val
    arr.delete(val)
end

#Array - Selection
def select_arr(arr)
    # select and return all odd numbers from the Array variable `arr`
      return arr.select{|a| a%2!=0}
  end
  
  def reject_arr(arr)
    # reject all elements which are divisible by 3
      return arr.reject!{|a| a/3}
  end
  
  def delete_arr(arr)
    # delete all negative elements
      return arr.delete_if{|a| 0<a}
  end
  
  def keep_arr(arr)
    # keep all non negative elements ( >= 0)
      return arr.keep_if{|a| 0<=a}  
  end

  #hash intialization
  # Initialize 3 variables here as explained in the problem statement
empty_hash = Hash.new
default_hash=Hash.new(1)
hackerrank = {"simmy" => 100, "vivmbbs" => 200}

#Hash - Each
def iter_hash(hash)
    # your code here
    hash.each do |key, value|
    # some code on individual key, value
      puts key
      puts value
end
end

#Addition, Deletion, Selection
# Enter your code here.
hackerrank.store(543121,100)
hackerrank.keep_if {|key, value| key.is_a?Integer}
hackerrank.delete_if {|key,value| key.even?}

#To konow method
a=1
puts a.methods

#To konow class
a=1
puts a.class

#until
i=0
until i<10
    i=i+1
end


